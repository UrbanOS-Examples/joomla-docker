upstream backend {
    server joomla:80;
}
server {
    listen [::]:80;
    listen 0.0.0.0:80;
    listen [::]:443 ssl http2;
    listen 0.0.0.0:443 ssl http2;

    server_name ${NGINX_HOST};
    location / {
        proxy_set_header Host $server_name;
        proxy_pass      http://backend;
        #change settings for images, css etc
        location ~ \.(js|css|png|jpg|jpeg|gif|ico|html|woff|woff2|ttf|svg|eot|otf)$ {
            add_header "Access-Control-Allow-Origin" "*";
            expires 1M;
            access_log off;
            add_header Cache-Control "public";
            proxy_set_header Host $server_name;
            proxy_pass      http://backend;
        }

        # Workaround for nested conditionals
        # IF
        # X-Forwarded-Proto header != https
        # AND
        # Connection type != https
        # THEN
        # Redirect to https
        if ($http_x_forwarded_proto != "https") {
            set $test "A";
        }
        if ($https = "") {
            set $test "${test}B";
        }
        if ($test = "AB") {
            rewrite ^(.*)$ https://$server_name$REQUEST_URI permanent;
        }

        # joomla's apache also needs this header, so make sure it is set even when testing locally
        proxy_set_header X-Forwarded-Proto "https";
    }
    #allow port 80 non HTTP for health check
    location /health_check {
                    proxy_pass http://backend;
                    proxy_set_header X-Forwarded-For $remote_addr;
                    proxy_set_header Host $host;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    expires off;
                    proxy_no_cache "on";
                    break;
    }
    location /administrator/ {
        #block access to the login screen unless the requests is from the internal VPN
       set $allow false;
        if ($http_x_forwarded_for ~ "^10.0.") { set $allow true; }
        if ($allow = false) {
                return 404;
        }
        proxy_set_header Host $server_name;
        proxy_pass      http://backend;

    }
    location /component/users {
        #block access to the login screen unless the requests is from the internal VPN
        set $allow false;
        if ($http_x_forwarded_for ~ "^10.0.") { set $allow true; }
        if ($allow = false) {
                return 404;
        }
        proxy_set_header Host $server_name;
        proxy_pass      http://backend;
    }
    add_header Content-Security-Policy "frame-ancestors 'self'";
    add_header x-frame-options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    server_tokens off; #disable nginx version headers
    add_header X-Content-Type-Options nosniff;
    proxy_hide_header X-Powered-By;
    location ~ /\.ht    {return 404;}
    location ~ /\.svn/  {return 404;}
    location ~ /\.git/  {return 404;}
    location ~ /\.hg/   {return 404;}
    location ~ /\.bzr/  {return 404;}

    # Nginx SSL configuration is to allow non prod instances to be usable without having to disable SSL
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    ssl_dhparam /etc/ssl/certs/dhparam.pem;
}

